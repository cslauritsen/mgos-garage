author: mongoose-os
description: A Mongoose OS app skeleton
version: 1.2.6

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - c

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src

# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs

# Custom configuration entries, settable via "device configuration"
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:

config_schema:
  - ["project.name", "s", "garage", {title: "Garage Controller"}]
  - ["time.debounce_millis", "i",  500, { title: "Time interval during which repeated interrupts may be ignored"}]
  - ["garage", "o", {title: "My app custom settings"}]
  - ["garage.name", "s", "My Garage", {title: "Name of Garage"}]
  - ["garage.door_count", "i",  2, { title: "Number of Doors connected"} ]
  - ["garage.door.a.name", "s",  "South Door", { title: "Human-friendly name of door 0"} ]
  - ["garage.door.a.pin.contact", "i",  13, { title: "Digital GPIO PIN for door closed contact LOW=active"} ]
  - ["garage.door.a.pin.activate", "i", 4, { title: "Digital GPIO PIN for door activate relay, should out HI on boot, LO=active"} ]
  - ["garage.door.b.name", "s",  "North Door", { title: "Human-friendly name of door 1"} ]
  - ["garage.door.b.pin.contact", "i",  12, { title: "Digital GPIO PIN for door open contact LOW=active"} ]
  - ["garage.door.b.pin.activate", "i",  -1, { title: "Digital GPIO PIN for door activate relay, should output LOW on boot, LOW=active"} ]

  - ["garage.dht_pin", "i", 0, {title: "DHT GPIO Pin Number"}]

  - ["garage.mqttPubInterval", "i", 60, {title: "How many seconds between MQTT publications"}]
  - ["garage.door_activate_millis", "i",  500, { title: "Milliseconds to leave door relay activated"}]
  - ["mqtt.server", "s",  "192.168.1.5", { title: "MQTT Server"} ]
  - ["mqtt.will_topic", "s",  "homie/garage/$state", { title: "MQTT LWT message topic prescribed by Homie 4.0 spec"} ]
  - ["mqtt.will_message", "s",  "lost", { title: "MQTT LWT message prescribed by Homie 4.0 spec"} ]
  - ["mqtt.will_retain", "b",  true, { title: "MQTT LWT retention flag"} ]
  - ["mqtt.enable", "b",  false, { title: "MQTT enabled"} ]
  - ["mqtt.max_queue_length", "i", 35, {title: "Maximum queue length for buffering QoS 1+ messages. 0 to disable queue."}]
  - ["mqtt.maxqos", "i",  2, { title: "Maximum QoS supported by the server"} ]
  - ["mqtt.max_unsent", "i",  512, { title: "Max unsent bytes before sending again"}]
  - ["homie.pubinterval", "i",  200, { title: "Millis to wait before sending another home cfg msg"}]
  - ["rpc.mqtt.enable", "b",  true, { title: "MQTT RPC enabled"} ]
  - ["debug.udp_log_addr", "s",  "192.168.1.5:31339", { title: "UDP log target"} ]
  - ["debug.level", 3]

# The following values allow the device to know when sunrise and sunset are
  - ["sys.tz_spec", "s", "EST5EDT4,M4.1.0/02:00:00,M10.5.0/02:00:00", {title: "See formats for the TZ env var: \"man tzset\". Formats like \":/path/to/file\" are not supported"}]
  - ["device.location.lat", 41.45944444444445 ]
  - ["device.location.lon", -81.55527777777777 ]


# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#
# printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
#  - ["debug.level", 3]

libs:
  - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-service-ota
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/rpc-mqtt
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/dht
  #- origin: https://github.com/mongoose-os-libs/mjs
  - origin: https://github.com/mongoose-os-libs/http-server
  - origin: https://github.com/mongoose-os-libs/ota-http-server 
  - origin: https://github.com/mongoose-os-libs/mqtt
  - origin: https://github.com/mongoose-os-libs/dash
  - origin: https://github.com/mongoose-os-libs/sensor-utils
  #- origin: https://github.com/mongoose-os-libs/adc
  - origin: https://github.com/mongoose-os-libs/wifi-setup-web-ui
  - origin: https://github.com/mongoose-os-libs/sntp
  - origin: https://github.com/mongoose-os-libs/rpc-loopback
  - origin: https://github.com/cslauritsen/cslhomie
    version: master


# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
